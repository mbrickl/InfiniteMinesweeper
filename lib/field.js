// Generated by CoffeeScript 1.3.3
(function() {
  var Field, MINE_PROPORTION;

  MINE_PROPORTION = 0.2;

  Field = (function() {

    function Field() {
      this.array = [];
    }

    Field.prototype.clickSquare = function(index, result, isFirstClick) {
      var outcome, square;
      if (result == null) {
        result = [];
      }
      if (isFirstClick == null) {
        isFirstClick = false;
      }
      square = getSquare(index, isFirstClick ? NOT_MINE : void 0);
      if (square.isChecked === NOT_CHECKED || square.isChecked === QED) {
        if (square.isMine()) {
          outcome = "boom";
        } else {
          outcome = "money";
        }
        square.number = getCount(index);
      } else {
        outcome = "nothing";
      }
      result.push({
        "index": index,
        square: square.getClass(),
        "result": outcome
      });
      if (square.number === 0 && outcome === "money") {
        clearSurroundingSquares(index, result);
      }
      return result;
    };

    Field.prototype.clearSurroundingSquares = function(index, result) {
      var coord, x, y;
      coord = indexToCoordinates(index);
      x = coord[0];
      y = coord[1];
      clickSquare(coordinatesToIndex(x - 1, y - 1), result);
      clickSquare(coordinatesToIndex(x, y - 1), result);
      clickSquare(coordinatesToIndex(x + 1, y - 1), result);
      clickSquare(coordinatesToIndex(x + 1, y), result);
      clickSquare(coordinatesToIndex(x + 1, y + 1), result);
      clickSquare(coordinatesToIndex(x, y + 1), result);
      clickSquare(coordinatesToIndex(x - 1, y + 1), result);
      return clickSquare(coordinatesToIndex(x - 1, y), result);
    };

    Field.prototype.markSquare = function(index) {
      var square;
      square = getSquare(index, UNKNOWN);
      if (square.isChecked === NOT_CHECKED) {
        square.isChecked = MARKED;
      } else if (square.isChecked === MARKED) {
        square.isChecked = QED;
      } else if (square.isChecked === QED) {
        square.isChecked = NOT_CHECKED;
      }
      return {
        "square": square.getClass()
      };
    };

    Field.prototype.getCount = function(index) {
      var coord, count, x, y;
      count = 0;
      coord = indexToCoordinates(index);
      x = coord[0];
      y = coord[1];
      if (getSquare(coordinatesToIndex(x - 1, y - 1)).isMine === MINE) {
        count += 1;
      }
      if (getSquare(coordinatesToIndex(x, y - 1)).isMine === MINE) {
        count += 1;
      }
      if (getSquare(coordinatesToIndex(x + 1, y - 1)).isMine === MINE) {
        count += 1;
      }
      if (getSquare(coordinatesToIndex(x + 1, y)).isMine === MINE) {
        count += 1;
      }
      if (getSquare(coordinatesToIndex(x + 1, y + 1)).isMine === MINE) {
        count += 1;
      }
      if (getSquare(coordinatesToIndex(x, y + 1)).isMine === MINE) {
        count += 1;
      }
      if (getSquare(coordinatesToIndex(x - 1, y + 1)).isMine === MINE) {
        count += 1;
      }
      if (getSquare(coordinatesToIndex(x - 1, y)).isMine === MINE) {
        count += 1;
      }
      return count;
    };

    Field.prototype.indexToCoordinates = function(index) {
      return split(index, "_");
    };

    Field.prototype.coordinatesToIndex = function(x, y) {
      return x + "_" + y;
    };

    Field.prototype.getSquare = function(index, forceMine) {
      if (forceMine == null) {
        forceMine = void 0;
      }
      index = coordinatesToIndex(x, y);
      if (!(this.array[index] != null)) {
        if (forceMine != null) {
          this.array[index] = new Square(forceMine);
        } else {
          this.array[index] = new Square(Math.random() < MINE_PROPORTION ? MINE : NOT_MINE);
        }
      } else if (this.array[index].isMine === UNKNOWN && forceMine !== UNKNOWN) {
        if (forceMine != null) {
          this.array[index] = new Square(forceMine);
        } else {
          this.array[index].isMine = Math.random() < MINE_PROPORTION ? MINE : NOT_MINE;
        }
      }
      return this.array[index];
    };

    return Field;

  })();

}).call(this);
