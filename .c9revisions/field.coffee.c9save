{"ts":1346372468050,"silentsave":true,"restoring":false,"patch":[[{"diffs":[[1,"MINE_PROPORTION = 0.2\n\nclass Field\n    constructor: ->\n        @array = []\n    \n    #---------\n    # NAME:         clickSquare\n    # DESCRIPTION:  called by the UI to click on a SQUARE\n    # PARAMETERS:\n    #  index (I) - should be in the format of XXX_YYY\n    #  result (IO,DEF=[]) an array of objects with the following properties\n    #   \"index\" : the index of the square clicked\n    #   \"square\" : the css class the square should now be\n    #   \"result\" :  \"boom\" if a mine was clicked\n    #               \"money\" if a space was cleared\n    #               \"nothing\" if a space was already clicked\n    #  ifFirstClick (I,DEF=no) whether this is the first click\n    #---------\n    clickSquare: (index, result = [], isFirstClick = no) ->\n        square = getSquare(index, if isFirstClick then NOT_MINE else undefined)\n        if square.isChecked == NOT_CHECKED or square.isChecked == QED\n            if square.isMine()\n                 outcome = \"boom\"\n            else\n                outcome = \"money\"\n        \n            square.number = getCount(index)\n        else\n            outcome = \"nothing\"\n        \n        result.push({\"index\" : index, square: square.getClass(), \"result\" : outcome})\n        \n        if square.number == 0 and outcome == \"money\"\n            clearSurroundingSquares(index, result)\n        return result\n\n    clearSurroundingSquares(index, result)\n        coord = indexToCoordinates(index)\n        x = coord[0]\n        y = coord[1]\n        \n        #upper left\n        clickSquare(coordinatesToIndex(x - 1, y - 1), result)\n        #upper\n        clickSquare(coordinatesToIndex(x, y - 1), result)\n        #upper right\n        clickSquare(coordinatesToIndex(x + 1, y - 1), result)\n        #right\n        clickSquare(coordinatesToIndex(x + 1, y), result)\n        #lower right\n        clickSquare(coordinatesToIndex(x + 1, y + 1), result)\n        #lower\n        clickSquare(coordinatesToIndex(x, y + 1), result)\n        #lower left\n        clickSquare(coordinatesToIndex(x - 1, y + 1), result)\n        #left\n        clickSquare(coordinatesToIndex(x - 1, y), result)\n\n    markSquare: (index) ->\n        square = getSquare(index, UNKNOWN)\n        if square.isChecked == NOT_CHECKED\n            square.isChecked = MARKED\n        else if square.isChecked == MARKED\n            square.isChecked = QED\n        else if square.isChecked == QED\n            square.isChecked = NOT_CHECKED\n        \n        return { \"square\" : square.getClass() }\n\n    getCount: (index) ->\n        count = 0\n        coord = indexToCoordinates(index)\n        x = coord[0]\n        y = coord[1]\n        \n        #upper left square\n        if getSquare(coordinatesToIndex(x - 1, y - 1)).isMine == MINE then count += 1\n        #upper square\n        if getSquare(coordinatesToIndex(x, y - 1)).isMine == MINE then count += 1\n        #upper right square\n        if getSquare(coordinatesToIndex(x + 1, y - 1)).isMine == MINE then count += 1\n        #right square\n        if getSquare(coordinatesToIndex(x + 1, y)).isMine == MINE then count += 1\n        #right bottom square\n        if getSquare(coordinatesToIndex(x + 1, y + 1)).isMine == MINE then count += 1\n        #bottom square\n        if getSquare(coordinatesToIndex(x, y + 1)).isMine == MINE then count += 1\n        #bottom left square\n        if getSquare(coordinatesToIndex(x - 1, y + 1)).isMine == MINE then count += 1\n        #left square\n        if getSquare(coordinatesToIndex(x - 1, y)).isMine == MINE then count += 1\n        \n        return count\n\n    indexToCoordinates: (index) ->\n        return split(index, \"_\")\n    coordinatesToIndex: (x, y) ->\n        return x + \"_\" + y\n    \n    getSquare: (index, forceMine = undefined) ->\n        index = coordinatesToIndex(x,y)\n        if not @array[index]?\n            if forceMine?\n                @array[index] = new Square(forceMine)\n            else\n                @array[index] = new Square(if Math.random() < MINE_PROPORTION then MINE else NOT_MINE)\n        else if @array[index].isMine == UNKNOWN and forceMine != UNKNOWN\n            if forceMine?\n                @array[index] = new Square(forceMine)\n            else\n                @array[index].isMine = if Math.random() < MINE_PROPORTION then MINE else NOT_MINE\n        return @array[index]    "]],"start1":0,"start2":0,"length1":0,"length2":4255}]],"length":4255}
